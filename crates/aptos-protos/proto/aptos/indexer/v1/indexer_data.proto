// Copyright Â© Aptos Foundation
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package aptos.indexer.v1;

import "aptos/transaction/testing1/v1/transaction.proto";
import "aptos/util/timestamp/timestamp.proto";

message ChainMetadata {
    optional uint64 chain_id = 1;
}

message GetTransactionsRequest {
  // Required; start version of current stream.
  optional uint64 starting_version = 1;

  // Optional; number of transactions to return in current stream.
  // If not present, return an infinite stream of transactions.
  optional uint64 transactions_count = 2;

  // Optional; number of transactions to return in current batch.
  optional uint64 batch_size = 3;

  // Opinoal; status of the processing is required in the response. 
  optional bool is_status_required = 4 [default = false];
}

// DataStatus is an optional response from the server to the client.
// It can benefit the downstream:
//   1. The client can get a heartbeat-like reponse from the server.
//   2. The client can track the last version processed by the server with a timely manner.
// This is a common signal frame that can be used by all the streaming RPCs.
message DataStatus {
  // Required.
  optional uint64 last_version_processed = 1;
  // Optional.
  optional aptos.util.timestamp.Timestamp last_version_timestamp = 2;
}

message GetTransactionsResponse {
  message GetTransactionsData {
    // Required; start version of current stream.
    optional uint64 version = 1;

    // Required; timestamp of current batch.
    optional aptos.util.timestamp.Timestamp timestamp = 2;

    // Required; transactions data.
    repeated aptos.transaction.testing1.v1.Transaction transactions  = 3;
    
    // Required; chain metadata.
    optional ChainMetadata chain_metadata = 4;
  }

  oneof response {
    GetTransactionsData data = 1;
    DataStatus status = 2;
  }
}

service IndexerData {
    // Get transactions without any filtering from starting version and end if transaction count is present.
    rpc GetTransactions(GetTransactionsRequest) returns (stream GetTransactionsResponse);
}